{"version":3,"sources":["Components/Header.js","Components/MemeGenerator.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImage","allMemeImgs","handleChange","bind","submitHandler","fetch","then","response","json","setState","data","memes","event","target","name","value","this","e","preventDefault","Math","floor","random","length","url","console","log","className","onSubmit","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAceA,MAZf,WACI,OACI,gCACI,yBACIC,IAAI,iEACJC,IAAI,aAER,+C,iDCkDGC,E,YAxDX,aAAc,IAAD,8BACT,+CACKC,MAAO,CACRC,QAAS,GACTC,WAAY,GACZC,YAAa,gCACbC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATZ,E,iFAYO,IAAD,OACfE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,EAAKE,SAAS,CACVR,YAAaM,EAASG,KAAKC,a,mCAK9BC,GAAO,IAAD,EACOA,EAAMC,OAArBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACbC,KAAKP,SAAL,eACKK,EAAOC,M,oCAIFE,GACVA,EAAEC,iBACF,IAAMlB,EAAcgB,KAAKnB,MAAMI,YAAYkB,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,SAASC,IACtGC,QAAQC,IAAIzB,GACZgB,KAAKP,SAAS,CACVT,YAAaA,M,+BAKjB,OACI,yBAAK0B,UAAU,kBACX,0BAAMA,UAAU,YAAYC,SAAUX,KAAKZ,eACvC,2BAAOwB,KAAK,OAAOC,YAAY,WAAWf,KAAK,UAAUC,MAAOC,KAAKnB,MAAMC,QAASgC,SAAUd,KAAKd,eACnG,2BAAO0B,KAAK,OAAOC,YAAY,cAAcf,KAAK,aAAaC,MAAOC,KAAKnB,MAAME,WAAY+B,SAAUd,KAAKd,eAC5G,wCAEJ,yBAAKwB,UAAU,QACX,yBAAKhC,IAAKsB,KAAKnB,MAAMG,YAAaL,IAAI,KACtC,wBAAI+B,UAAU,OAAOV,KAAKnB,MAAMC,QAAhC,KACA,wBAAI4B,UAAU,UAAUV,KAAKnB,MAAME,kB,GAlD3BgC,a,MCYbC,MATf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.8af4c8eb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(){\r\n    return(\r\n        <header>\r\n            <img\r\n                src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\"\r\n                alt=\"Problem?\"\r\n            />\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, {Component} from \"react\";\r\n\r\nclass MemeGenerator extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImage: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response =>{\r\n                this.setState({\r\n                    allMemeImgs: response.data.memes\r\n                })\r\n            })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name, value} = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    submitHandler(e){\r\n        e.preventDefault();\r\n        const randomImage = this.state.allMemeImgs[Math.floor(Math.random() * this.state.allMemeImgs.length)].url;\r\n        console.log(randomImage)\r\n        this.setState({\r\n            randomImage: randomImage\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"main-container\">\r\n                <form className=\"meme-form\" onSubmit={this.submitHandler}>\r\n                    <input type=\"text\" placeholder=\"Top Text\" name=\"topText\" value={this.state.topText} onChange={this.handleChange}/>\r\n                    <input type=\"text\" placeholder=\"Bottom Text\" name=\"bottomText\" value={this.state.bottomText} onChange={this.handleChange}/>\r\n                    <button>Gen</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    <img src={this.state.randomImage} alt=\"\"/>\r\n                    <h2 className=\"top\">{this.state.topText} </h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator;","import React, {Component} from \"react\";\r\nimport Header from './Header';\r\nimport MemeGenerator from \"./MemeGenerator\";\r\nimport '../style.css';\r\n\r\nfunction App(){\r\n    return(\r\n        <div>\r\n            <Header />\r\n            <MemeGenerator />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}